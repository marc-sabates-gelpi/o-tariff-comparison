(ns o-tariff-comparison.specs
  (:require [clojure.spec.alpha :as s])
  (:gen-class))

(s/def ::positive #(<= 0 %))
(s/def ::fuel-price (s/double-in :min 0.0 :max 1.0 :NaN? false :infinite? false))
(s/def ::standing_charge (s/double-in :min 0.0 :max 100.0 :NaN? false :infinite? false))
(s/def ::usage (s/double-in :min 0.0 :max 1000000.0 :NaN? false :infinite? false))
(s/def ::monthly-spend (s/double-in :min 0.0 :max 1000.0 :NaN? false :infinite? false))
(s/def ::cost ::positive)
(s/def ::command string?)
(s/def ::tariff string?)
(s/def ::power ::fuel-price)
(s/def ::gas ::fuel-price)
(s/def ::fuel-type (s/with-gen (s/and keyword? #(or (= :power %) (= :gas %)))
                     #(s/gen #{:power :gas})))
(s/def ::rates (s/keys :req-un [(or ::power ::gas)]))
(s/def ::a-tariff (s/keys :req-un [::tariff ::rates ::standing_charge]))
;; (s/def ::f-main (s/or :cost (s/cat :command ::command :power-usage ::usage :gas-usage ::usage)
;;                      :usage (s/cat :command ::command :tariff-name ::tariff :fuel-type ::fuel-type :monthly-spend ::monthly-spend)))
(s/def ::f-get-tariff-cost (s/cat :power-usage ::usage :gas-usage ::usage :a-tariff ::a-tariff))
(s/def ::ret-get-tariff-cost (s/keys :req-un [::tariff ::cost]))
(s/def ::fn-get-tariff-cost #(= (-> % :ret :tariff) (-> % :args :a-tariff :tariff)))
(s/def ::f-get-fuel-cost (s/cat :usage ::usage :fuel-type ::fuel-type :a-tariff ::a-tariff))
(s/def ::ret-get-fuel-cost ::cost)
(s/def ::fn-get-fuel-cost #(let [usage (get-in % [:args :usage])
                                 fuel-type (get-in % [:args :fuel-type])
                                 a-tariff (get-in % [:args :a-tariff])
                                 rate (get-in a-tariff [:rates fuel-type])
                                 standing-charge (get a-tariff :standing_charge 0)]
                             (or
                              (and (< 0 usage) (not (nil? rate)) (= (:ret %) (+ (* 12 standing-charge) (* usage rate))))
                              (zero? (:ret %)))))
